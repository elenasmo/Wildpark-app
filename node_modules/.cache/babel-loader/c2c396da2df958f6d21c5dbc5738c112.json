{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.darkenColor = exports.lightenColor = exports.mkColor = void 0;\n\nvar _polished = require(\"polished\");\n\nvar _clientLogger = require(\"@storybook/client-logger\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar mkColor = function mkColor(color) {\n  return {\n    color: color\n  };\n}; // Check if it is a string. This is for the sake of warning users\n// and the successive guarding logics that use String methods.\n\n\nexports.mkColor = mkColor;\n\nvar isColorString = function isColorString(color) {\n  if (typeof color !== 'string') {\n    _clientLogger.logger.warn(\"Color passed to theme object should be a string. Instead \" + \"\".concat(color, \"(\").concat(_typeof(color), \") was passed.\"));\n\n    return false;\n  }\n\n  return true;\n}; // Passing arguments that can't be converted to RGB such as linear-gradient\n// to library polished's functions such as lighten or darken throws the error\n// that crashes the entire storybook. It needs to be guarded when arguments\n// of those functions are from user input.\n\n\nvar isValidColorForPolished = function isValidColorForPolished(color) {\n  return !/(gradient|var|calc)/.test(color);\n};\n\nvar applyPolished = function applyPolished(type, color) {\n  if (type === 'darken') {\n    return (0, _polished.rgba)(\"\".concat((0, _polished.darken)(1, color)), 0.95);\n  }\n\n  if (type === 'lighten') {\n    return (0, _polished.rgba)(\"\".concat((0, _polished.lighten)(1, color)), 0.95);\n  }\n\n  return color;\n};\n\nvar colorFactory = function colorFactory(type) {\n  return function (color) {\n    if (!isColorString(color)) {\n      return color;\n    }\n\n    if (!isValidColorForPolished(color)) {\n      return color;\n    } // Guard anything that is not working with polished.\n\n\n    try {\n      return applyPolished(type, color);\n    } catch (error) {\n      return color;\n    }\n  };\n};\n\nvar lightenColor = colorFactory('lighten');\nexports.lightenColor = lightenColor;\nvar darkenColor = colorFactory('darken');\nexports.darkenColor = darkenColor;","map":null,"metadata":{},"sourceType":"script"}